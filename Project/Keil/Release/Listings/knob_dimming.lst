C51 COMPILER V9.60.7.0   KNOB_DIMMING                                                      05/06/2025 17:33:33 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KNOB_DIMMING
OBJECT MODULE PLACED IN .\Release\Objects\knob_dimming.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\knob_dimming.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000
                    -C) INCDIR(..\..\Libraries\Include;..\..\User) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\knob_dimming.lst) 
                    -OBJECT(.\Release\Objects\knob_dimming.obj)

line level    source

   1          #include "knob_dimming.h" // ÊóãÈíÆË∞ÉÂÖâÂ§¥Êñá‰ª∂
   2          
   3          volatile u16 limited_max_pwm_duty = 0; // Â≠òÊîæÈôêÂà∂ÁöÑÊúÄÂ§ßÂç†Á©∫ÊØî
   4          // volatile u16 last_limited_max_pwm_duty = MAX_PWM_DUTY;
   5          
   6          // volatile bit flag_is_knob_change = 0; // Ê†áÂøó‰ΩçÔºåÊóãÈíÆÁöÑÁä∂ÊÄÅÊòØÂê¶ÂèëÁîüÂèòÂåñ
   7          
   8          // Ê†πÊçÆÊóãÈíÆÔºåÈôêÂà∂ÂΩìÂâçÁöÑÊúÄÂ§ßÂç†Á©∫ÊØî
   9          void update_max_pwm_duty_coefficient(void)
  10          {
  11   1          // static u16 last_adc_val = 4095;
  12   1          volatile u16 adc_val = 0;
  13   1          // volatile u16 knob_dimming_cur_level = 0;
  14   1          adc_sel_pin(ADC_SEL_PIN_P31);
  15   1          adc_val = adc_get_val();
  16   1      
  17   1          // if (last_adc_val != adc_val)
  18   1          // {
  19   1          //     flag_is_knob_change = 1;
  20   1          //     last_adc_val = adc_val;
  21   1          // }
  22   1      
  23   1          // limited_max_pwm_duty = (u32)adjust_duty * adc_val / 4096; // ‰ºöÂá∫Áé∞ÊåáÊï∞Á∫ß‰∏ãÈôçÔºåÂõ†‰∏∫adjus
             -t_duty‰∏ÄÁõ¥Âú®ÂèòÂåñ
  24   1          // limited_max_pwm_duty = (u32)MAX_PWM_DUTY * adc_val / 4096; // ÂàÜÁ∫ßÂ§™Â§öÔºåÂä†‰∏äÊäñÂä®ÂíåËøÖÈÄüÂ
             -èòÂåñÔºå‰ºöÂØºËá¥ÁÅØÂÖâÈó™ÁÉÅ
  25   1      
  26   1      #if 1
  27   1      
  28   1          // knob_dimming_cur_level = (adc_val - KNOB_DIMMING_MIN_ADC_VAL) / KNOB_DIMMING_ADC_VAL_PER_LEVEL;
  29   1          // if (adc_val >= (KNOB_DIMMING_MAX_ADC_VAL))
  30   1          // {
  31   1          //     // Â§ß‰∫éÊüê‰∏™ÂÄºÔºåÁõ¥Êé•ËæìÂá∫100%
  32   1          //     limited_max_pwm_duty = MAX_PWM_DUTY;
  33   1          //     knob_dimming_cur_level = KNOB_DIMMING_LEVELS;
  34   1          // }
  35   1          // else if (adc_val <= (KNOB_DIMMING_MIN_ADC_VAL))
  36   1          // {
  37   1          //     // Â∞è‰∫éÊüê‰∏™ÂÄºÔºåÁõ¥Êé•ÂÖ≥Èó≠
  38   1          //     limited_max_pwm_duty = 0;
  39   1          //     knob_dimming_cur_level = 0;
  40   1          // }
  41   1          // else
  42   1          // {
  43   1          //     // ËÆ°ÁÆóÂæóÂá∫ÂΩìÂâçadÂÄºÂØπÂ∫îÁöÑÁ≠âÁ∫ß
  44   1          //     // u16 knob_dimming_cur_level = (adc_val - KNOB_DIMMING_MIN_ADC_VAL) / KNOB_DIMMING_ADC_VAL_PER
             -_LEVEL;
  45   1      
  46   1          //     if ((adc_val - KNOB_DIMMING_MIN_ADC_VAL) > (knob_dimming_cur_level * KNOB_DIMMING_ADC_VAL_PER_L
             -EVEL + KNOB_DIMMING_ADC_DEAD_ZONE_PER_LEVEL) &&
  47   1          //         (adc_val - KNOB_DIMMING_MIN_ADC_VAL) < ((knob_dimming_cur_level + 1) * KNOB_DIMMING_ADC_VAL
             -_PER_LEVEL - KNOB_DIMMING_ADC_DEAD_ZONE_PER_LEVEL))
  48   1          //     {
C51 COMPILER V9.60.7.0   KNOB_DIMMING                                                      05/06/2025 17:33:33 PAGE 2   

  49   1          //         // Â¶ÇÊûúÈááÈõÜÁöÑadÂÄºËêΩÂú®Ëøô‰∏ÄÁ∫ß
  50   1          //     }
  51   1          //     else if ((adc_val - KNOB_DIMMING_MIN_ADC_VAL) < (knob_dimming_cur_level * KNOB_DIMMING_ADC_VAL_
             -PER_LEVEL + KNOB_DIMMING_ADC_DEAD_ZONE_PER_LEVEL))
  52   1          //     {
  53   1          //         // Â¶ÇÊûúÈááÈõÜÁöÑadÂÄºÂ∞è‰∫éËøô‰∏ÄÁ∫ßÂØπÂ∫îÁöÑadÂÄº+Ê≠ªÂå∫ÂÄº
  54   1          //         if (knob_dimming_cur_level > 0)
  55   1          //         {
  56   1          //             knob_dimming_cur_level--;
  57   1          //         }
  58   1          //     }
  59   1      
  60   1          //     limited_max_pwm_duty = (u32)MAX_PWM_DUTY * knob_dimming_cur_level / KNOB_DIMMING_LEVELS;
  61   1          // }
  62   1      
  63   1          if (adc_val <= KNOB_DIMMING_MIN_ADC_VAL) // MIN 0%  0.57V
  64   1          {
  65   2              limited_max_pwm_duty = 0;
  66   2          }
  67   1          else if (adc_val <= 1278) // 20% 1.52V
  68   1          {
  69   2              // ËÆ°ÁÆóÈááÈõÜÂà∞ÁöÑadÂÄºÊâÄÂç†20%ÂØπÂ∫îÁöÑadÂÄºÂæóÂç†ÊØîÔºåÂÜç‰πò‰ª• 20%ÁöÑÂç†Á©∫ÊØî
  70   2              limited_max_pwm_duty = (u32)adc_val * MAX_PWM_DUTY * 2 / 10 / 1278;
  71   2          }
  72   1          else if (adc_val <= 2498) // 40% 2.97V
  73   1          {
  74   2              limited_max_pwm_duty = (u32)adc_val * MAX_PWM_DUTY * 4 / 10 / 2498;
  75   2          }
  76   1          else if (adc_val <= 2641) // 50% 3.14V
  77   1          {
  78   2              // limited_max_pwm_duty = adc_val * MAX_PWM_DUTY * 5 / 10 / 2641;
  79   2              limited_max_pwm_duty = (u32)adc_val * MAX_PWM_DUTY / 2 / 2641;
  80   2          }
  81   1          else if (adc_val <= 3482) // 60% 4.14V
  82   1          {
  83   2              limited_max_pwm_duty = (u32)adc_val * MAX_PWM_DUTY * 6 / 10 / 3482;
  84   2          }
  85   1          else if (adc_val <= 4087) // 80% 4.86V
  86   1          {
  87   2              limited_max_pwm_duty = (u32)adc_val * MAX_PWM_DUTY * 8 / 10 / 4087;
  88   2          }
  89   1          else
  90   1          {
  91   2              limited_max_pwm_duty = (u32)adc_val * MAX_PWM_DUTY / 4095;
  92   2          }
  93   1      
  94   1      #if USE_MY_DEBUG
              
                  // printf("cur_level %u\n", knob_dimming_cur_level);
              
              #endif // #if USE_MY_DEBUG
  99   1      
 100   1      #endif
 101   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    295    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
C51 COMPILER V9.60.7.0   KNOB_DIMMING                                                      05/06/2025 17:33:33 PAGE 3   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
