C51 COMPILER V9.60.7.0   KNOB_DIMMING                                                      05/05/2025 14:47:48 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE KNOB_DIMMING
OBJECT MODULE PLACED IN .\Release\Objects\knob_dimming.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\User\knob_dimming.c LARGE OPTIMIZE(8,SPEED) BROWSE INTVECTOR(0X000
                    -C) INCDIR(..\..\Libraries\Include;..\..\User) INTERVAL(3) DEBUG OBJECTEXTEND PRINT(.\Release\Listings\knob_dimming.lst) 
                    -OBJECT(.\Release\Objects\knob_dimming.obj)

line level    source

   1          #include "knob_dimming.h" // ÊóãÈíÆË∞ÉÂÖâÂ§¥Êñá‰ª∂
   2          
   3          volatile u16 limited_max_pwm_duty = 0; // Â≠òÊîæÈôêÂà∂ÁöÑÊúÄÂ§ßÂç†Á©∫ÊØî
   4          
   5          // Ê†πÊçÆÊóãÈíÆÔºåÈôêÂà∂ÂΩìÂâçÁöÑÊúÄÂ§ßÂç†Á©∫ÊØî
   6          void update_max_pwm_duty_coefficient(void)
   7          {
   8   1          volatile u16 adc_val = 0;
   9   1          volatile u16 knob_dimming_cur_level = 0;
  10   1          adc_sel_pin(ADC_SEL_PIN_P31);
  11   1          adc_val = adc_get_val();
  12   1      
  13   1          // limited_max_pwm_duty = (u32)adjust_duty * adc_val / 4096; // ‰ºöÂá∫Áé∞ÊåáÊï∞Á∫ß‰∏ãÈôçÔºåÂõ†‰∏∫adjus
             -t_duty‰∏ÄÁõ¥Âú®ÂèòÂåñ
  14   1          // limited_max_pwm_duty = (u32)MAX_PWM_DUTY * adc_val / 4096; // ÂàÜÁ∫ßÂ§™Â§öÔºåÂä†‰∏äÊäñÂä®ÂíåËøÖÈÄüÂ
             -èòÂåñÔºå‰ºöÂØºËá¥ÁÅØÂÖâÈó™ÁÉÅ
  15   1      
  16   1      #if USE_MY_DEBUG
              
                  printf("adc_val %u\n", adc_val);
                  printf("limited_max_pwm_duty %u\n", limited_max_pwm_duty);
              
                  {
                      static u8 cnt = 0;
                      cnt++;
                      if (cnt >= 200)
                      {
                          cnt = 0;
                          // printf("adc_val %u\n", adc_val);
                          // printf("limited_max_pwm_duty %u\n", limited_max_pwm_duty);
                      }
                  }
              #endif
  32   1      
  33   1      #if 1
  34   1      
  35   1          knob_dimming_cur_level = (adc_val - KNOB_DIMMING_MIN_ADC_VAL) / KNOB_DIMMING_ADC_VAL_PER_LEVEL;
  36   1          if (adc_val >= (KNOB_DIMMING_MAX_ADC_VAL))
  37   1          {
  38   2              // Â§ß‰∫éÊüê‰∏™ÂÄºÔºåÁõ¥Êé•ËæìÂá∫100%
  39   2              limited_max_pwm_duty = MAX_PWM_DUTY;
  40   2              knob_dimming_cur_level = KNOB_DIMMING_LEVELS;
  41   2          }
  42   1          else if (adc_val <= (KNOB_DIMMING_MIN_ADC_VAL))
  43   1          {
  44   2              // Â∞è‰∫éÊüê‰∏™ÂÄºÔºåÁõ¥Êé•ÂÖ≥Èó≠
  45   2              limited_max_pwm_duty = 0;
  46   2              knob_dimming_cur_level = 0;
  47   2          }
  48   1          else
  49   1          {
  50   2              // ËÆ°ÁÆóÂæóÂá∫ÂΩìÂâçadÂÄºÂØπÂ∫îÁöÑÁ≠âÁ∫ß
  51   2              // u16 knob_dimming_cur_level = (adc_val - KNOB_DIMMING_MIN_ADC_VAL) / KNOB_DIMMING_ADC_VAL_PER_LE
C51 COMPILER V9.60.7.0   KNOB_DIMMING                                                      05/05/2025 14:47:48 PAGE 2   

             -VEL;
  52   2      
  53   2              if (adc_val > (knob_dimming_cur_level * KNOB_DIMMING_ADC_VAL_PER_LEVEL + KNOB_DIMMING_ADC_DEAD_ZON
             -E_PER_LEVEL) &&
  54   2                  adc_val < ((knob_dimming_cur_level + 1) * KNOB_DIMMING_ADC_VAL_PER_LEVEL - KNOB_DIMMING_ADC_DE
             -AD_ZONE_PER_LEVEL))
  55   2              {
  56   3                  // Â¶ÇÊûúÈááÈõÜÁöÑadÂÄºËêΩÂú®Ëøô‰∏ÄÁ∫ß
  57   3              }
  58   2              else if (adc_val < (knob_dimming_cur_level * KNOB_DIMMING_ADC_VAL_PER_LEVEL + KNOB_DIMMING_ADC_DEA
             -D_ZONE_PER_LEVEL))
  59   2              {
  60   3                  // Â¶ÇÊûúÈááÈõÜÁöÑadÂÄºÂ∞è‰∫éËøô‰∏ÄÁ∫ßÂØπÂ∫îÁöÑadÂÄº+Ê≠ªÂå∫ÂÄº
  61   3                  if (knob_dimming_cur_level > 0)
  62   3                  {
  63   4                      knob_dimming_cur_level--;
  64   4                  }
  65   3              }
  66   2      
  67   2              limited_max_pwm_duty = (u32)MAX_PWM_DUTY * knob_dimming_cur_level / KNOB_DIMMING_LEVELS;
  68   2          }
  69   1      
  70   1      #if USE_MY_DEBUG
              
                  printf("cur_level %u\n", knob_dimming_cur_level);
              
              #endif // #if USE_MY_DEBUG
  75   1      
  76   1      #endif
  77   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    282    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
